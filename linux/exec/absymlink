#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
path_arg_arr=()
mkdir_targets=false
mkdir_dstdir=false
abspath_func='abspath'
fwd_args_arr=()
dryrun=false

## Custom globals
target_dir_arg_provided=false
dst_dir=''


## Script usage
read -r -d '' script_usage << EOM
Usage:
    ${script_name} [OPTION]... [-T] TARGET LINK_NAME   (1st form)
    ${script_name} [OPTION]... TARGET                  (2nd form)
    ${script_name} [OPTION]... TARGET... DIRECTORY     (3rd form)
    ${script_name} [OPTION]... -t DIRECTORY TARGET...  (4th form)
    (see 'man ln' for further details)

Create symbolic link(s) with 'ln -s -n', converting TARGET paths
to absolute paths for link creation.

Options:
[all 'ln' options]
    --mkdir-targets
        Create directory where TARGET path(s) should exist before
        creating symbolic link.
    --mkdir-dstdir
        Create output DIRECTORY (either last argument path, or 'ln'
        --target-directory path) where links will be created.
    --abspath-func=<program call string> (default='${abspath_func}')
        Program used to convert TARGET paths into absolute paths.
        Program call is evaluated once for each TARGET path,
        where the path is appended to the program call string.
        Program options may be included in the program call string.
-fp,--fullpath
        Set --abspath-func='fullpath'.
-dp,--derefpath=<int deref-count>
        Set --abspath-func='derefcount <int deref count>'.
-db,--debug
-dr,--dryrun
        Print 'ln' command used to create link, without executing.
EOM
if (( $# < 1 )); then
    echo_e -e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
while (( "$#" )); do
    arg="$1"

    if [ "$(string_startswith "$arg" '-')" = false ]; then
        path_arg_arr+=( "$arg" )

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val=$(printf '%s' "${arg_opt#*=}" | sed -r -e "s|^['\"]+||" -e "s|['\"]+$||")
            arg_opt="${arg_opt%%=*}"
            arg_opt_raw="${arg%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_raw="$arg"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'mkdir-targets' ]; then
            arg_opt_nargs=0
            mkdir_targets=true

        elif [ "$arg_opt" = 'mkdir-dstdir' ]; then
            arg_opt_nargs=0
            mkdir_dstdir=true

        elif [ "$arg_opt" = 'abspath-func' ]; then
            arg_opt_nargs=1
            abspath_func="$arg_val"

        elif [ "$arg_opt" = 'fp' ] || [ "$arg_opt" = 'fullpath' ]; then
            arg_opt_nargs=0
            abspath_func="fullpath"

        elif [ "$arg_opt" = 'dp' ] || [ "$arg_opt" = 'derefpath' ]; then
            arg_opt_nargs=1
            abspath_func="derefpath ${arg_val}"

        elif [ "$arg_opt" = 'db' ] || [ "$arg_opt" = 'debug' ]; then
            arg_opt_nargs=0
            dryrun=true

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        else
            if [ "$(itemOneOf "$arg_opt" 't' 'target-directory' )" = true ]; then
                target_dir_arg_provided=true
                dst_dir="$arg_val"
            fi

            if [ "$(itemOneOf "$arg_opt" 'S' 'suffix' 't' 'target-directory' )" = true ]; then
                arg_opt_nargs=1
                if [ "$(string_contains "$arg_val" '*')" = true ] || [ "$(string_contains "$arg_val" ' ')" = true ]; then
                    arg_val="\"${arg_val}\""
                fi
                fwd_args_arr+=( "$arg_opt_raw" "$arg_val" )

            else
                arg_opt_nargs=0
                if [ "$(string_contains "$arg" '*')" = true ] || [ "$(string_contains "$arg" ' ')" = true ]; then
                    arg="\"${arg}\""
                fi
                fwd_args_arr+=( "$arg" )
            fi
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate arguments

num_path_args="${#path_arg_arr[@]}"
if (( num_path_args == 0 )); then
    echo_e "At least one TARGET argument must be provided"
    exit_script_with_status 1
elif (( num_path_args == 1 )) || [ "$target_dir_arg_provided" = true ]; then
    last_target_idx=$(( num_path_args - 1 ))
else
    last_target_idx=$(( num_path_args - 2 ))
    dst_idx=$(( num_path_args - 1 ))
    dst_dir="${path_arg_arr[$dst_idx]}"
fi

abspath_arg_arr=()
target_dne_arr=()

for idx in "${!path_arg_arr[@]}"; do
    path="${path_arg_arr[$idx]}"

    if (( idx <= last_target_idx )); then
        path=$(${abspath_func} "$path")
        cmd_status=$?
        if (( cmd_status != 0 )); then
            echo_e "--abspath-func='${abspath_func}' command failed with status ${cmd_status}"
            exit_script_with_status 1
        fi
    fi

    abspath_arg_arr+=( "$path" )

    if (( idx <= last_target_idx )) && [ ! -e "$path" ]; then
        target_dne_arr+=( "$path" )
    fi
done


## Create directories if needed

mkdir_paths=()
if [ "$mkdir_targets" = true ]; then
    mkdir_paths=("${target_dne_arr[@]+${target_dne_arr[@]}}")
fi
if [ "$mkdir_dstdir" = true ] && [ -n "$dst_dir" ]; then
    mkdir_paths+=( "$dst_dir" )
fi
if (( ${#mkdir_paths[@]} > 0 )); then
    for path in "${mkdir_paths[@]}"; do
        if [ ! -e "$path" ]; then
            if [ "$dryrun" = true ]; then
                echo "Creating directory: ${path}"
                continue
            fi
            mkdir -p "$path"
            cmd_status=$?
            if (( cmd_status != 0 )); then
                echo_e "Received non-zero exit status (${cmd_status}) from mkdir command:"
                echo_e "mkdir -p ${path}"
                echo_e "Exiting before creating symbolic links"
                exit_script_with_status 1
            fi
        fi
    done
fi


## Perform linking

ln_args="${fwd_args_arr[*]+${fwd_args_arr[*]}}"

cmd="ln -s -n ${ln_args} $(printf ' "%s"' "${abspath_arg_arr[@]}")"

if [ "$dryrun" = true ]; then
    echo "$cmd"
else
    eval "$cmd"
fi
