#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
set +u; shopt -s expand_aliases; source ~/.bashrc; shopt -u expand_aliases; set -u
source "$bash_functions_script"

## Required envvars
if { ! env | grep -q '^MY_EMAIL='; } || [ -z "$MY_EMAIL" ]; then
    echo "Please run 'export MY_EMAIL=\"your-email-address\"' in this bash instance and add that to your ~/.bashrc file :)"
    exit_script_with_status 1
fi
email_address="$MY_EMAIL"


## Script usage
read -r -d '' script_usage << EOM
Usage: ${script_name} [-{email output option:o|e|q}] run_command (can be quoted to perform multiline commands such as for/while loop)
 Email output option detrmines which text streams are recorded in the email body:
  -s : separate stdout and stderr
  -o : stdout only (stdout and stderr are printed to terminal during run command as usual)
  -e : stderr only (stderr is captured and printed to terminal at end of run command)
  -q : no output   (stdout and stderr are printed to terminal during run command as usual)
  (if no option is given, stdout and stderr are included as mixed output in email body text)
EOM

script_name_caps=$(string_to_uppercase "$script_name")


cmd_args=("$@")
email_output_opt=''
if (( $# == 0 )); then
    cmd="(none)"
    cmd_preview="(none)"
else
    first_arg="${cmd_args[0]}"
    if [ "$first_arg" ==  '-h' ] || [ "$first_arg" ==  '--h' ] || [ "$first_arg" ==  '-help' ] || [ "$first_arg" ==  '--help' ]; then
        echo "$script_usage"
        exit 0
    fi
    if [ "$first_arg" ==  '-s' ] || [ "$first_arg" ==  '-o' ] || [ "$first_arg" ==  '-e' ] || [ "$first_arg" ==  '-q' ]; then
        email_output_opt="$first_arg"
        cmd_args=("${cmd_args[@]:1}")
    fi

    cmd=$(echo "${cmd_args[*]}")
    cmd_preview=$(echo "${cmd_args[@]:0:4}")
    if (( ${#cmd_args[@]} > 3 )); then
        cmd_preview=$(echo "${cmd_preview} ...")
    fi
fi

email_out_desc=''
cmd_err=''

time_started=$(date)
if [ "$cmd" = "(none)" ]; then
    cmd_out="(none)"
else
    set +u
    if [ "$email_output_opt" = '-q' ]; then
        eval "$cmd"
        cmd_out='(suppressed by -q option)'
    elif [ "$email_output_opt" = '-e' ]; then
        email_out_desc=" (stderr only)"
        { cmd_out=$(eval "$cmd" 2>&1 1>&3-) ;} 3>&1
        echo "$cmd_out"
    elif [ "$email_output_opt" = '-o' ]; then
        exec 5>&1
        email_out_desc=" (stdout only)"
        cmd_out=$(eval "$cmd" | tee >(cat - >&5))
    elif [ "$email_output_opt" = '-s' ]; then
        run_and_catch_out_err cmd_out cmd_err "$cmd"
    else
        exec 5>&1
        cmd_out=$(eval "$cmd" 2>&1 | tee >(cat - >&5))
    fi
    set -u
fi
time_finished=$(date)


read -r -d '' email_header << EOM
----- ${script_name_caps} COMMAND -----
${cmd}

--- TIME STARTED ---
${time_started}
${time_finished}
--- TIME FINISHED ---
EOM

if true; then
    read -r -d '' email_out << EOM
------ ${script_name_caps} COMMAND OUTPUT${email_out_desc} -----
${cmd_out}
EOM
    email_out="\n\n${email_out}"
else
    email_out=''
fi

if [ -n "$cmd_err" ]; then
    read -r -d '' email_err << EOM
----- ${script_name_caps} COMMAND ERROR -----
${cmd_err}
EOM
    email_err="\n\n${email_err}"
else
    email_err=''
fi

email_subject="Finished command: ${cmd_preview}"
email_body="${email_header}${email_err}${email_out}"
echo -e "$email_body" | mail -s "$email_subject" "$email_address"
