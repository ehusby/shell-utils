#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
method_choices=( 'pbs' 'ssh' )
method=''
cleanup_dir="/local"
ssh_passphrase=''
remove_all=false
find_args=''
ssh_dryrun=false
dryrun=false

## Custom globals
removed_files_log="${HOME}/${script_name}_<timestamp>_removed_files.txt"


## Script usage
read -r -d '' script_usage << EOM
Usage: ${script_name} [OPTION]... METHOD

  Remove files within a specified local directory path that exists on
all PBS cluster nodes.
  The list of cluster nodes is sourced from the command 'pbsnodes -l up'.
  A list of all files removed (or 'to be removed' if dryrun options are
provided) is generated at '${removed_files_log}'.

METHOD:
    pbs
        Submit a single-core PBS job to each cluster node for cleanup.
    ssh
        SSH into each cluster node in serial and run cleanup command over SSH.
Options:
    --cleanup-dir (default='${cleanup_dir}')
        Local directory on cluster nodes where cleanup will be performed.
    --ssh-pw
        SSH key passphrase for all SSH connections established when
        METHOD is 'ssh'. If this option is not provided, the passphrase 
        may need to be entered upon each serial SSH connection to
        cluster nodes.
    --all
        Attempt to remove all files within the cleanup directories
        regardless of ownership. By default only the USER(${USER})'s
        files are removed.
    --find-args
        Additional arguments to 'find' command used to perform cleanup.
        e.g. '-mindepth 2 -maxdepth 2 -name "*.tif"'
        If '-mindepth' >= 1 is not specified, '-mindepth 1' will be
        added automatically.
        If the --all script option is not provided, '-user \${USER}'
        will be added automatically.
        The '-ls' and '-delete' find arguments should not be provided,
        as they are applied as part of normal script execution.
    --ssh-dryrun
        If METHOD is 'ssh', run serial SSH connections to cluster nodes
        to generate the list of files to be removed.
-dr,--dryrun
        Print commands used to perform cleanup, without executing.
EOM
if (( $# < 1 )); then
    echo_e -e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
while (( "$#" )); do
    arg="$1"

    if [ "$(string_startswith "$arg" '-')" = false ]; then
        if [ -z "$method" ]; then
            method="$arg"
        else
            echo_e "Unexpected argument: ${arg}"
            exit_script_with_status 1
        fi

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val="${arg_opt#*=}"
            arg_opt="${arg_opt%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'ssh-pw' ]; then
            arg_opt_nargs=1
            ssh_passphrase="$2"

        elif [ "$arg_opt" = 'all' ]; then
            arg_opt_nargs=0
            remove_all=true

        elif [ "$arg_opt" = 'find-args' ]; then
            arg_opt_nargs=1
            find_args="$2"
            arg_val_can_start_with_dash=true

        elif [ "$arg_opt" = 'ssh-dryrun' ]; then
            arg_opt_nargs=0
            ssh_dryrun=true

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        else
            echo_e "Unexpected argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate arguments

if [ "$(itemOneOf "$method" "${method_choices[@]}")" = false ]; then
    echo_e "METHOD must be one of the following: ${method_choices[*]}"
    exit_script_with_status 1
fi

if [ -n "$find_args" ]; then
    if [ "$(string_contains "$find_args" '-mindepth')" = true ]; then
        find_args_mindepth=$(echo "$find_args" | sed -r 's/.*-mindepth(=|[[:space:]]+)([0-9]+).*/\2/')
        if (( find_args_mindepth < 1 )); then
            echo_e "--find-args '-mindepth' must be >= 1"
            exit_script_with_status 1
        fi
    else
        find_args="-mindepth 1 ${find_args}"
    fi
    if [ "$remove_all" = false ] && [ "$(string_contains "$find_args" '-user')" = false ]; then
        find_args="${find_args} -user ${USER}"
    fi
else
    find_args="-mindepth 1"
    if [ "$remove_all" = false ]; then
        find_args="${find_args} -user ${USER}"
    fi
fi


## Setup variables

log_date=$(date +'%Y%m%d%H%M%S')
removed_files_log="${removed_files_log/<timestamp>/${log_date}}"

read -r -d '' pbs_jobscript << EOM
#!/bin/bash

#PBS -N CleanupLocal
#PBS -m n
#PBS -k oe
#PBS -j oe

echo ________________________________________________________
echo
echo PBS Job Log
echo Start time: \$(date)
echo
echo Job name: \$PBS_JOBNAME
echo Job ID: \$PBS_JOBID
echo Submitted by user: \$USER
echo User effective group ID: \$(id -ng)
echo
echo Hostname of submission: \$PBS_O_HOST
echo Submitted to cluster: \$PBS_SERVER
echo Submitted to queue: \$PBS_QUEUE
echo Requested nodes per job: \$PBS_NUM_NODES
echo Requested cores per node: \$PBS_NUM_PPN
echo Requested cores per job: \$PBS_NP
echo Node list file: \$PBS_NODEFILE
echo Nodes assigned to job: \$(cat \$PBS_NODEFILE)
echo Running node index: \$PBS_O_NODENUM
echo
echo Running on hostname: \$HOSTNAME
echo Parent PID: \$PPID
echo Process PID: \$\$
echo
echo Working directory: \$PBS_O_WORKDIR
echo ________________________________________________________
echo

echo "Removed the following files:"

find "${cleanup_dir}" ${find_args} -ls -delete | tee -a "${removed_files_log}"
EOM

nodelist=$(pbsnodes -l up | awk '{print $1}' | sort -u)


## Perform cleanup

while IFS= read -r node; do

    if [ "$method" = 'ssh' ]; then
        cmd="ssh ${node} -f 'find \"${cleanup_dir}\" ${find_args} -ls"

        if [ "$ssh_dryrun" = false ]; then
            cmd="${cmd} -delete"
        fi
        cmd="${cmd} >> \"${removed_files_log}\"'"

        if [ -n "$ssh_passphrase" ]; then
            cmd="expect -c \"spawn ${cmd}; expect 'passphrase'; send '${ssh_passphrase}\r'; interact\""
            cmd=$(echo "$cmd" | sed -r "s|'|\\\\\"|g")
        fi

        echo "$cmd"
        if [ "$dryrun" = false ]; then
            eval "$cmd"
        fi

    elif [ "$method" = 'pbs' ]; then
        ncpus=$(pbsnodes -x "$node" | parse_xml_value 'np')

        cmd="echo \"\$pbs_jobscript\" | qsub -l \"nodes=${node},ncpus=${ncpus}\""

        echo "$cmd"
        if [ "$dryrun" = false ]; then
            eval "$cmd"
        fi
    fi

done <<< "$nodelist"
