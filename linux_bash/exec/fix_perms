#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_file=$(readlink -f "${BASH_SOURCE[0]}"); export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_dir=$(dirname "$script_file")
script_name=$(basename "$script_file")
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
octal_perms=''
files_x=false
chmod_mode_choices_arr=(  'add' 'set' 'remove' )
chmod_mode_operator_arr=(  '+'   '='    '-'    )
chmod_mode='set'
namepat_arr=()
dryrun=false
find_args_arr=()
srcpath_arr=()

## Custom globals


## Script usage
read -r -d '' script_usage << EOM
Usage: ${script_name} [OPTION]... OCTAL_PERMS PATH... ['find' OPTION]...

  Run 'chmod' recursively on one or more directories (or files),
applying regular chmod octol permission settings.
  Where normally 'chmod -R 775 <dir>' would give all files
and folders within the directory executable permission,
this script will convert the octal setting to a long-form
setting that only makes folders and NOT files executable.
  Additionally, 'find' arguments may be provided to apply
permission changes more selectively than 'chmod -R'.
Provide the --dryrun option to first see what command will be
run under the hood without executing.

Options:
    --files-x
        Allow files to be given execute permissions.
        By default, only folders are given execute perms.
 -m,--mode={$(string_join '|' "${chmod_mode_choices_arr[@]}")} (default=${chmod_mode})
        How 'chmod' should apply permission changes.
 -n,--name
        Include files/dirs that match this pattern.
        This option can be provided multiple times to include
        multiple file patterns.
-dr,--dryrun
        Print command used to modify file/folder permissions,
        without executing.
EOM
if (( $# < 1 )); then
    echo_e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
parsing_fwd_args=false
while (( "$#" )); do
    arg="$1"

    if [ "$parsing_fwd_args" = true ]; then
        # Accept critical script optional arguments
        # specified at end of command.
        is_fwd_arg=true
        if [ "$(string_startswith "$arg" '-')" = true ]; then
            arg_opt="$(string_lstrip "$arg" '-')"
            is_fwd_arg=false
            if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
                arg_opt_nargs=0
                echo "$script_usage"
                exit 0
            elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
                dryrun=true
            else
                is_fwd_arg=true
            fi
        fi
        if [ "$is_fwd_arg" = true ]; then
            find_args_arr+=( "$arg" )
        fi

    elif [ "$(string_startswith "$arg" '-')" = false ]; then
        if [ -z "$octal_perms" ]; then
            octal_perms="$arg"
        else
            srcpath_arr+=( "$arg" )
        fi

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val="${arg_opt#*=}"
            arg_opt="${arg_opt%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'files-x' ]; then
            arg_opt_nargs=0
            files_x=true

        elif [ "$arg_opt" = 'm' ] || [ "$arg_opt" = 'mode' ]; then
            arg_opt_nargs=1
            chmod_mode="$arg_val"

        elif [ "$arg_opt" = 'n' ] || [ "$arg_opt" = 'name' ]; then
            arg_opt_nargs=1
            namepat_arr+=( "$arg_val" )

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        else
            arg_opt_nargs=0

            if (( ${#srcpath_arr} >= 1 )); then
                find_args_arr+=( "$arg" )
                parsing_fwd_args=true
            else
                echo_e "Unexpected argument: ${arg}"
                exit_script_with_status 1
            fi
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ]; then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate arguments

if [ "$(string_is_posint_or_zero "$octal_perms")" = true ] && (( ${#octal_perms} == 3 )); then
    :
else
    echo_e "OCTAL_PERMS must be a 3-digit octal number (accepted by 'chmod')"
    exit_script_with_status 1
fi

if [ "$(itemOneOf "$chmod_mode" "${chmod_mode_choices_arr[@]}")" = false ]; then
    echo_e "chmod mode must be one of the following: ${chmod_mode_choices_arr[*]}"
    exit_script_with_status 1
fi

if (( ${#srcpath_arr[@]} == 0 )); then
    echo_e "At least one source path argument must be provided"
    exit_script_with_status 1
fi
for srcpath in "${srcpath_arr[@]}"; do
    if [ ! -e "$srcpath" ]; then
        echo_e "Source path does not exist: ${srcpath}"
        exit_script_with_status 1
    fi
done


# Build -name arguments to give to 'find' command
find_name_args=''
if (( ${#namepat_arr[@]} > 0 )); then
    find_name_args="\("
    for i in "${!namepat_arr[@]}"; do
        if (( i == 0 )); then
            find_name_args="${find_name_args} -name '${namepat_arr[i]}'"
        else
            find_name_args="${find_name_args} -o -name '${namepat_arr[i]}'"
        fi
    done
    find_name_args="${find_name_args} \)"
fi
find_args="${find_args_arr[*]+${find_args_arr[*]}} ${find_name_args}"
find_args=$(string_strip "$find_args")


# Convert octal permission setting to RWX format
chmod_perms_setting=''
i_chmod_mode=$(indexOf "$chmod_mode" "${chmod_mode_choices_arr[@]}")
chmod_mode_operator="${chmod_mode_operator_arr[$i_chmod_mode]}"
for (( i=0; i<${#octal_perms}; i++ )); do
    octal_digit="${octal_perms:$i:1}"
    if (( i == 0 )); then
        perm_group='u'
    elif (( i == 1 )); then
        perm_group='g'
    elif (( i == 2 )); then
        perm_group='o'
    fi
    octal_rwx=$(chmod_octal_digit_to_rwx "$octal_digit")
    chmod_perms_setting="${chmod_perms_setting},${perm_group}${chmod_mode_operator}${octal_rwx}"
done
chmod_perms_setting=$(string_lstrip "$chmod_perms_setting" ',')
if [ "$files_x" = false ]; then
    chmod_perms_setting="${chmod_perms_setting//x/X}"
fi

echo "Converted permission setting: ${octal_perms} -> ${chmod_perms_setting}"


## Main program

for srcpath in "${srcpath_arr[@]}"; do
    if [ -n "$find_args" ]; then
        cmd="find \"${srcpath}\" ${find_args} -exec chmod ${chmod_perms_setting} {} \;"
    else
        cmd="chmod -R ${chmod_perms_setting} \"${srcpath}\""
    fi

    echo "Fixing perms in ${srcpath}"

    if [ "$dryrun" = true ]; then
        echo "$cmd"
    else
        eval "$cmd"
    fi
done

echo "Done!"
