#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
src_path_arr=()
zipfile=''
force_glob=false
fwd_args_arr=()
dryrun=false

## Custom globals


## Script usage
read -r -d '' script_usage << EOM
Usage: ${script_name} [OPTION]... SRC_PATH... ['zip' OPTION]...

Quickly zip batches of files and/or folders.

  SRC_PATH may be a relative or absolute path to a file/folder,
or a path leading up and including the common filename/foldername
prefix of multiple files/folders in the same source directory.

  If only one SRC_PATH argument is provided, the --zipfile option
does not need to be provided; the default output zipfile location
is next to the source item(s) indicated by SRC_PATH. If SRC_PATH
is a directory and SRC_PATH does not end with a forward slash (/),
the folder is placed at the root of the zipfile -- if it does end
with a forward slash, the immediate contents of the folder are
placed at the root of the zipfile.
  If multiple SRC_PATH arguments are provided, the ZIPFILE argument
must be provided indicating the output zipfile location.

  For 'zip' options, note that --recurse-paths (-r) is automatically
provided, and --junk-paths (-j) is not advised.

Options:
 -o,--zipfile
        Location of output zipfile.
 -g,--glob
        When SRC_PATH is the full path to an existing file/folder,
        force treating all SRC_PATH arguments as prefixes matching
        additional files/folders in the same directories.
-dr,--dryrun
        Print command(s) used to zip files/folders, without executing.
EOM
if (( $# < 1 )); then
    echo_e -e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
parsing_fwd_args=false
while (( "$#" )); do
    arg="$1"

    if [ "$parsing_fwd_args" = true ]; then
        # Accept critical script optional arguments
        # specified at end of command.
        is_fwd_arg=true
        if [ "$(string_startswith "$arg" '-')" = true ]; then
            arg_opt="$(string_lstrip "$arg" '-')"
            is_fwd_arg=false
            if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
                arg_opt_nargs=0
                echo "$script_usage"
                exit 0
            elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
                dryrun=true
            else
                is_fwd_arg=true
            fi
        fi
        if [ "$is_fwd_arg" = true ]; then
            if [ "$(string_contains "$arg" '*')" = true ] || [ "$(string_contains "$arg" ' ')" = true ]; then
                arg="'${arg}'"
            fi
            fwd_args_arr+=( "$arg" )
        fi

    elif [ "$(string_startswith "$arg" '-')" = false ]; then
        src_path_arr+=( "$arg" )

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val="${arg_opt#*=}"
            arg_opt="${arg_opt%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'o' ] || [ "$arg_opt" = 'zipfile' ]; then
            arg_opt_nargs=1
            zipfile="$arg_val"

        elif [ "$arg_opt" = 'g' ] || [ "$arg_opt" = 'glob' ]; then
            arg_opt_nargs=0
            force_glob=true

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        else
            arg_opt_nargs=0
            
            if (( ${#src_path_arr[@]} > 0 )); then
                if [ "$(string_contains "$arg" '*')" = true ] || [ "$(string_contains "$arg" ' ')" = true ]; then
                    arg="'${arg}'"
                fi
                fwd_args_arr+=( "$arg" )
                parsing_fwd_args=true
            else
                echo_e "Unexpected argument: ${arg}"
                exit_script_with_status 1
            fi
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate and adjust arguments

num_src_path_args="${#src_path_arr[@]}"
if (( num_src_path_args == 0 )); then
    echo_e "At least one SRC_PATH argument must be provided"
    exit_script_with_status 1
elif (( num_src_path_args == 1 )); then
    if [ -n "$zipfile" ]; then
        if [ -d "$zipfile" ]; then
            zipfile="$(fullpath "$zipfile")/$(string_rstrip "$(basename "${src_path_arr[0]}")" '.').zip"
        else
            zipfile=$(fullpath "$zipfile")
        fi
    else
        zipfile="$(fullpath "${src_path_arr[0]}").zip"
    fi
else
    if [ -n "$zipfile" ]; then
        zipfile=$(fullpath "$zipfile")
    else
        echo_e "Output zipfile must be specified when multiple SRC_PATH arguments are provided"
        exit_script_with_status 1
    fi
fi

src_fullpath_arr=()
for src_path in "${src_path_arr[@]}"; do
    if [ ! -e "$src_path" ] || [ "$(string_endswith "$src_path" '/')" = true ] || [ "$force_glob" = true ]; then
        src_dirent_arr=( "$src_path"* )
        if (( ${#src_dirent_arr[@]} == 0 )); then
            echo_e "Cannot find any files/dirs matching SRC_PATH argument: ${src_path}*"
            exit_script_with_status 1
        fi
    fi
    src_fullpath_arr+=( "$(fullpath_preserve_trailing_slash "$src_path")" )
done

zip_opt_args="${fwd_args_arr[*]+${fwd_args_arr[*]}}"


## Perform zipping

for src_path in "${src_fullpath_arr[@]}"; do

    if [ "$(string_endswith "$src_path" '/')" = true ]; then
        working_dir="$src_path"
        src_path_basename=""
    else
        working_dir=$(dirname "$src_path")
        src_path_basename=$(basename "$src_path")
    fi

    echo "Changing to directory: ${working_dir}"
    cd "$working_dir"
    cd_status=$?
    if (( cd_status != 0 )); then
        echo_e "Cannot 'cd' to directory: ${working_dir}"
        exit_script_with_status 1
    fi

    if [ ! -e "$src_path" ] || [ "$(string_endswith "$src_path" '/')" = true ] || [ "$force_glob" = true ]; then
        src_dirent_arr=( "$src_path_basename"* )
    else
        src_dirent_arr=( "$src_path_basename" )
    fi

    cmd="zip -r ${zip_opt_args} \"${zipfile}\" $(printf ' "%s"' "${src_dirent_arr[@]}")"

    if [ "$dryrun" = true ]; then
        echo "$cmd"
    else
        eval "$cmd"
        cmd_status=$?
        if (( cmd_status != 0 )); then
            echo_e "Processing command failed with non-zero exit status (${cmd_status}): ${cmd}"
            exit_script_with_status 1
        fi
    fi
done
