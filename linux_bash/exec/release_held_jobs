#!/bin/bash

## Bash settingsblahahah
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
max_running_jobs=''
check_min=5
jobname_prefix_arr=()
dryrun=false

## Custom globals


## Script usage
read -r -d '' script_usage << EOM
Usage: ${script_name} [OPTION]... MAX_RUNNING_JOBS [JOBNAME_PREFIX...]

Periodically check 'qstat' and release PBS jobs with "held" status (H)
matching the designated jobname prefix(es), keeping the total number of
running jobs to a specified maximum.

Options:
    --check-min (default=${check_min})
        Time interval in minutes between checks of 'qstat' to release
        held jobs.
-dr,--dryrun
        Print actions without executing.
EOM
if (( $# < 1 )); then
    echo_e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
while (( "$#" )); do
    arg="$1"

    if [ "$(string_startswith "$arg" '-')" = false ]; then
        if [ -z "$max_running_jobs" ]; then
            max_running_jobs="$arg"
        else
            jobname_prefix_arr+=( "$arg" )
        fi

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val="${arg_opt#*=}"
            arg_opt="${arg_opt%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'check-min' ]; then
            arg_opt_nargs=1
            check_min="$arg_val"

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        else
            arg_opt_nargs=0
            ln_opt_arg_arr+=( "$arg" )
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate arguments

if [ -z "$max_running_jobs" ]; then
    echo_e "MAX_RUNNING_JOBS argument must be provided"
    exit_script_with_status 1
elif [ "$(string_is_posint "$max_running_jobs")" = false ]; then
    echo_e "MAX_RUNNING_JOBS must be a positive integer"
    exit_script_with_status 1
fi

if [ "$(string_is_posint "$check_min")" = false ]; then
    echo_e "CHECK_MIN must be a positive integer"
    exit_script_with_status 1
fi


if (( ${#jobname_prefix_arr[@]} > 0 )); then
    re_jobname_prefix=$(printf " (%s)" "$(string_join '|' "${jobname_prefix_arr[@]}")")
else
    re_jobname_prefix='.*'
fi


## Run queue watch loop

while true; do
    qstat_selected_jobs=$(qstat -n1 -u "$USER" | grep -E "$re_jobname_prefix")
    num_jobs_running=$(echo "$qstat_selected_jobs" | grep " R " | wc -l)
    num_jobs_held=$(echo "$qstat_selected_jobs" | grep " H " | wc -l)
    num_jobs_total=$(echo "$qstat_selected_jobs" | wc -l)

    echo "${num_jobs_total} jobs in queue matching jobname '${re_jobname_prefix}': ${num_jobs_running} running, ${num_jobs_held} held"

    if (( num_jobs_held > 0 )); then
        num_jobs_can_be_released=$(( max_running_jobs - num_jobs_running ))
        if (( num_jobs_can_be_released > 0 )); then
            jobids_to_release=$(echo "$qstat_selected_jobs" | grep " H " | head -n $num_jobs_can_be_released | cut -d" " -f1 | cut -d"." -f1)
            echo "Releasing $(echo "$jobids_to_release" | wc -l) jobids: $(echo "$jobids_to_release" | tr '\n' ' ')"
            if [ "$dryrun" = false ]; then
                echo "$jobids_to_release" | xargs qrls
            fi
        fi
    fi

    for (( min_til_check=check_min; min_til_check > 0; min_til_check-- )); do
        echo -en "\r\033[K${min_til_check} minutes until next check for held jobs (max_running_jobs=${max_running_jobs}, check_min=${check_min}, jobname_prefix='${re_jobname_prefix}')"
        sleep 1m
    done
    echo -en "\r\033[K"
done
