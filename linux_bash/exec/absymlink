#!/bin/bash

## Bash settings
set -uo pipefail

## Script globals
script_name=$(basename "${BASH_SOURCE[0]}")
script_dir=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd)
script_dir_abs=$({ cd "$(dirname "${BASH_SOURCE[0]}")" || { echo "Failed to access script file directory" >&2; exit; } } && pwd -P)
script_file="${script_dir}/${script_name}"
if [ -L "${BASH_SOURCE[0]}" ]; then
    script_file_abs=$(readlink "${BASH_SOURCE[0]}")
else
    script_file_abs="${script_dir_abs}/${script_name}"
fi
export CURRENT_PARENT_BASH_SCRIPT_FILE="$script_file"
script_args=("$@")

## Script imports
lib_dir="${script_dir}/../lib"
bash_functions_script="${lib_dir}/bash_script_func.sh"

## Source imports
source "$bash_functions_script"


## Arguments
path_arg_arr=()
fwd_args_arr=()
dryrun=false

## Custom globals


## Script usage
read -r -d '' script_usage << EOM
Usage:
    ${script_name} [OPTION]... [-T] TARGET LINK_NAME   (1st form)
    ${script_name} [OPTION]... TARGET                  (2nd form)
    ${script_name} [OPTION]... TARGET... DIRECTORY     (3rd form)
    ${script_name} [OPTION]... -t DIRECTORY TARGET...  (4th form)
    (see 'man ln' for further details)

  Create symbolic link(s) with 'ln -s', converting TARGET paths
to absolute paths for link creation.

Options:
[all 'ln' options]
-dr,--dryrun
        Print 'ln' command used to create link, without executing.
EOM
if (( $# < 1 )); then
    echo_e -e "$script_usage"
    exit_script_with_status 1
fi


## Parse arguments
set +u
while (( "$#" )); do
    arg="$1"

    if [ "$(string_startswith "$arg" '-')" = false ]; then
        path_arg_arr+=( "$arg" )

    else
        arg_opt="$(string_lstrip "$arg" '-')"
        arg_opt_nargs=''
        if [ "$(string_contains "$arg_opt" '=')" = true ]; then
            arg_val="${arg_opt#*=}"
            arg_opt="${arg_opt%%=*}"
            arg_opt_nargs_do_shift=false
        else
            arg_val="$2"
            arg_opt_nargs_do_shift=true
        fi
        arg_val_can_start_with_dash=false

        if [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
            arg_opt_nargs=0
            echo "$script_usage"
            exit 0

        elif [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            arg_opt_nargs=0
            dryrun=true

        elif [ "$(itemOneOf "$arg_opt" 'suffix' 'target-directory' )" = true ]; then
            arg_opt_nargs=1
            if [ "$(string_contains "$arg_val" '\*')" = true ] || [ "$(string_contains "$arg_val" ' ')" = true ]; then
                arg_val="'${arg_val}'"
            fi
            fwd_args_arr+=( "$arg_opt" "$arg_val" )

        else
            arg_opt_nargs=0
            if [ "$(string_contains "$arg" '\*')" = true ] || [ "$(string_contains "$arg" ' ')" = true ]; then
                arg="'${arg}'"
            fi
            fwd_args_arr+=( "$arg" )
        fi

        if [ -z "$arg_opt_nargs" ]; then
            echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
            exit_script_with_status 1
        fi

        if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
            for arg_num in $(seq 1 $arg_opt_nargs); do
                shift
                arg_val="$1"
                if [ -z "$arg_val" ]; then
                    echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                    exit_script_with_status 1
                elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                    echo_e "Unexpected argument value: ${arg} ${arg_val}"
                    exit_script_with_status 1
                fi
            done
        fi
    fi

    shift
done
set -u


## Validate arguments

num_path_args="${#path_arg_arr[@]}"
if (( num_path_args == 0 )); then
    echo_e "At least one TARGET argument must be provided"
    exit_script_with_status 1
elif (( num_path_args == 1 )); then
    last_target_idx=0
else
    last_target_idx=$(( num_path_args - 2 ))
fi

abspath_arg_arr=()

for idx in "${!path_arg_arr[@]}"; do
    path=$(abspath "${path_arg_arr[$idx]}")
    if (( idx <= last_target_idx )); then
        abspath_arg_arr+=( "$(abspath "$path")" )
    else
        abspath_arg_arr+=( "$path" )
    fi
done

ln_opt_args="${fwd_args_arr[*]+${fwd_args_arr[*]}}"


## Perform linking

cmd="ln -s ${ln_opt_args} $(printf ' "%s"' "${abspath_arg_arr[@]}")"

if [ "$dryrun" = true ]; then
    echo "$cmd"
else
    eval "$cmd"
fi
