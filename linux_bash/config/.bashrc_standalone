# .bashrc

#echo "In ~/.bashrc"

# >>> CHANGE NAME OF YOUR EXISTING SYSTEM-PROVIDED .bashrc FILE
# >>> to '.bashrc_system_default', and this .bashrc will source that!!
if [ -f "${HOME}/.bashrc_system_default" ]; then
    source "${HOME}/.bashrc_system_default"
fi

### Source global definitions
#if [ -f /etc/bashrc ]; then
#    . /etc/bashrc
#fi


## Set umask to enable rwx for group members
#umask 002  # allow OTHER read and execute perms, but not write
umask 007  # disallow OTHER read|write|execute perms

### Settings for interactive shells only
if [ -n "$PS1" ]; then

    # Overwrite possibly goofy system default for command prompt
    # that messes with screen window names
    export PROMPT_COMMAND=''
    PS1_VENV_PREFIX=$(printf '%s' "$PS1" | grep -Eo '^[[:space:]]*\([^\(\)]*\)[[:space:]]+')
#    export PS1="${PS1_VENV_PREFIX}[\u@\h:\w]\$ "  # no colors
    export PS1="${PS1_VENV_PREFIX}[\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]\$ "  # colors

    # Append trailing slash when tab-completing directory paths
    bind 'set mark-symlinked-directories on'

    # Disable default CTRL+S mapping as XON/XOFF flow control
    # ... you usually don't need it?
    # Then you can use both CTRL+R and CTRL+S to search
    # backwards and forwards through your history!!
    # AND you don't accidentally freeze your screen with CTRL+S
    stty -ixon

    # Set options for standard programs
    export LESS='RXMi'  # https://man7.org/linux/man-pages/man1/less.1.html#OPTIONS
    export CLICOLOR=1
    if which dircolors 1>/dev/null 2>/dev/null; then
        eval "$(dircolors -b)"
    else
        export LSCOLORS=ExGxBxDxCxEgEdxbxgxcxd
    fi
    if ls --color=auto /dev/null 1>/dev/null 2>/dev/null; then
        alias ls='ls --color=auto'
    elif ls -G /dev/null 1>/dev/null 2>/dev/null; then
        alias ls='ls -G'
    fi
    if grep --color=auto '' /dev/null 1>/dev/null 2>/dev/null; [ "$?" -ne 2 ]; then
        alias grep='grep --color=auto'
    fi
    alias tmux='tmux -2'  # enable 256 color support

    # Change screen socket directory to avoid recurring permission errors
    export SCREENDIR="${HOME}/.screen"
    if [ ! -d "$SCREENDIR" ]; then
        mkdir -p -m 700 "$SCREENDIR"
    fi

fi


################################
### System-specific settings ###
################################

## Exports (PATH changes and global vars)
export SYSTEM_CLEAR_LOC=$(which clear 2>/dev/null)  # Used in .bashrc_over_ssh wrapper

# >>> FILL OUT OR COMMENT OUT THE FOLLOWING LINES <<< #
SHELL_UTILS_PATH="path-to/shell-utils"
export MY_EMAIL="your-email-address"  # Necessary for shell-utils 'email_me' script
export PATH="${PATH}:${SHELL_UTILS_PATH}/linux_bash/exec"  # Easily call shell-utils executable scripts
#export PATH="${PATH}:path-to/pyscript-utils"  # Easily call pyscript-utils executable scripts

# Remove duplicate PATH entries, preserving order
export PATH="$(LANG=C perl -e 'print join(":", grep { not $seen{$_}++ } split(/:/, $ENV{PATH}))')"


## Aliases


## Functions


## Startup processes


################################
################################


### General purpose functions and aliases




##### From shell-utils/linux_bash/lib/bash_base_func.sh #####


## Array/item parsing

#indexOf() { local el="$1"; shift; local arr=("$@"); local index=-1; local i; for i in "${!arr[@]}"; do [ "${arr[$i]}" = "$el" ] && { index=$i; break; } done; echo $index; }
indexOf() {
    local el="$1"     # Save first argument in a variable
    shift             # Shift all arguments to the left (original $1 gets lost)
    local arr=("$@")  # Rebuild the array with rest of arguments
    local index=-1

    local i
    for i in "${!arr[@]}"; do
        if [ "${arr[$i]}" = "$el" ]; then
            index=$i
            break
        fi
    done

    echo "$index"
}

itemOneOf() {
    local el="$1"
    shift
    local arr=("$@")

    if (( $(indexOf "$el" ${arr[@]+"${arr[@]}"}) == -1 )); then
        echo false
    else
        echo true
    fi
}

process_items() {
    local process_func="$1"; shift
    local pipe_in_items="$1"; shift
    local cwd_glob_if_no_items_provided="$1"; shift
    local processed_items=false
    local item
    if (( $# > 0 )); then
        if [ "$pipe_in_items" = true ]; then
            eval "printf '%s\n' \"\$@\" | ${process_func}"
            while (( $# > 0 )); do shift; done
        else
            while (( $# > 0 )); do
                item="$1"
                eval "${process_func} \"${item}\""
                shift
            done
        fi
        processed_items=true
    fi
    if [[ -p /dev/stdin ]]; then
        if [ "$pipe_in_items" = true ]; then
            eval "$process_func"
        else
            while IFS= read -r item; do
                eval "${process_func} \"${item}\""
            done
        fi
        processed_items=true
    fi
    if [ "$processed_items" = false ] && [ "$cwd_glob_if_no_items_provided" = true ]; then
        if [ "$pipe_in_items" = true ]; then
            eval "printf '%s\n' * | ${process_func}"
        else
            for item in *; do
                eval "${process_func} \"${item}\""
            done
        fi
    fi
}


## Printing

print_string() { printf '%s' "$*"; }

echo_e()  { echo "$@" >&2; }
echo_oe() { echo "$@" | tee >(cat >&2); }


## String manipulation

base10() { print_string "$((10#$1))"; }

escape_regex_special_chars() {
    local special_chars_arr=( '^' '.' '+' '*' '?' '|' '/' '\\' '(' ')' '[' ']' '{' '}' '$' )
    local str_in="$1"
    local str_out=''
    local i char
    for (( i=0; i<${#str_in}; i++ )); do
        char="${str_in:$i:1}"
        if [ "$(itemOneOf "$char" "${special_chars_arr[@]}")" = true ]; then
            char="\\${char}"
        fi
        str_out="${str_out}${char}"
    done
    echo "$str_out"
}

string_to_uppercase() { print_string "$@" | tr '[:lower:]' '[:upper:]'; }
string_to_lowercase() { print_string "$@" | tr '[:upper:]' '[:lower:]'; }

#string_lstrip() { print_string "$1" | sed -r "s/^($(escape_regex_special_chars "$2"))+//"; }
#string_rstrip() { print_string "$1" | sed -r "s/($(escape_regex_special_chars "$2"))+$//"; }

string_lstrip() {
    local string_in="$1"
    local strip_substr=''
    local string_stripped=''

    if (( $# >= 2 )) && [ -n "$2" ]; then
        strip_substr="$(escape_regex_special_chars "$2")"
    else
        strip_substr='[[:space:]]'
    fi

    string_stripped=$(print_string "$string_in" | sed -r "s/^($(print_string "$strip_substr"))+//")

    print_string "$string_stripped"
}

string_rstrip() {
    local string_in="$1"
    local strip_substr=''
    local string_stripped=''

    if (( $# >= 2 )) && [ -n "$2" ]; then
        strip_substr="$(escape_regex_special_chars "$2")"
    else
        strip_substr='[[:space:]]'
    fi

    string_stripped=$(print_string "$string_in" | sed -r "s/($(print_string "$strip_substr"))+$//")

    print_string "$string_stripped"
}

string_strip() {
    local string_in="$1"
    local strip_substr=''
    local string_stripped=''

    if (( $# >= 2 )); then
        strip_substr="$2"
    else
        strip_substr=''
    fi

    string_stripped=$(string_lstrip "$string_in" "$strip_substr")
    string_stripped=$(string_rstrip "$string_stripped" "$strip_substr")

    print_string "$string_stripped"
}

string_strip_around_delim() {
    local string_in delim strip_substr

    strip_substr=''

    if [[ -p /dev/stdin ]]; then
        delim="$1"
        if (( $# >= 2 )); then
            strip_substr="$2"
        fi
    else
        string_in="$1"
        delim="$2"
        if (( $# >= 3 )); then
            strip_substr="$3"
        fi
    fi

    delim="$(escape_regex_special_chars "$delim")"
    if [ -n "$strip_substr" ]; then
        strip_substr="$(escape_regex_special_chars "$strip_substr")"
    else
        strip_substr='[[:space:]]'
    fi

    local sed_cmd="sed -r 's/^(${strip_substr})*//; s/(${strip_substr})*${delim}(${strip_substr})*/${delim}/g; s/(${strip_substr})*$//;'"

    if [[ -p /dev/stdin ]]; then
        eval "$sed_cmd"
    else
        eval "print_string \"${string_in}\" | ${sed_cmd}"
    fi
}

string_rstrip_decimal_zeros() { print_string "$@" | sed '/\./ s/\.\{0,1\}0\{1,\}$//'; }

collapse_repeated_substring() { print_string "$1" | sed -r "s/($(escape_regex_special_chars "$2"))+/\1/g"; }

string_join() { local IFS="$1"; shift; print_string "$*"; }


## String testing

re_test() {
    local re_test="$1"
    local test_str="$2"

    if [[ $test_str =~ $re_test ]]; then
        echo true
    else
        echo false
    fi
}
re_test_0() { [ "$(re_test "$@")" = true ]; }

string_startswith() { re_test "^$(escape_regex_special_chars "$2")" "$1"; }
string_endswith() { re_test "$(escape_regex_special_chars "$2")\$" "$1"; }
string_contains() { re_test "$(escape_regex_special_chars "$2")" "$1"; }

string_is_int() {            re_test '^-?[0-9]+$' "$1"; }
string_is_posint_or_zero() { re_test   '^[0-9]+$' "$1"; }
string_is_negint_or_zero() { re_test  '^-[0-9]+$' "$1"; }

string_is_posint() {
    if [ "$(string_is_posint_or_zero "$1")" = true ] && [ "$(re_test '^0+$' "$1")" = false ]; then
        echo true
    else
        echo false
    fi
}
string_is_negint() {
    if [ "$(string_is_negint_or_zero "$1")" = true ] && [ "$(re_test '^-0+$' "$1")" = false ]; then
        echo true
    else
        echo false
    fi
}

string_is_num() {            re_test '^-?[0-9]+\.?[0-9]*$' "$1"; }
string_is_posnum_or_zero() { re_test   '^[0-9]+\.?[0-9]*$' "$1"; }
string_is_negnum_or_zero() { re_test  '^-[0-9]+\.?[0-9]*$' "$1"; }

string_is_posnum() {
    if [ "$(string_is_posnum_or_zero "$1")" = true ] && [ "$(re_test '^0+\.?0*$' "$1")" = false ]; then
        echo true
    else
        echo false
    fi
}
string_is_negnum() {
    if [ "$(string_is_negnum_or_zero "$1")" = true ] && [ "$(re_test '^-0+\.?0*$' "$1")" = false ]; then
        echo true
    else
        echo false
    fi
}

string_is_datenum() { re_test '^[1-2][0-9]{3}(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$' "$1"; }

string_is_pairname() { re_test '^[A-Z0-9]{4}_[0-9]{8}_[0-9A-F]{16}_[0-9A-F]{16}$' "$1"; }


## String parsing

string_common_prefix() {
    printf "%s\n" "$@" | sed -e '$!{N;s/^\(.*\).*\n\1.*$/\1\n\1/;D;}'
}

parse_xml_value() {
    local xml_tag=$(escape_regex_special_chars "$1")
    grep -Po "<${xml_tag}>(.*?)</${xml_tag}>" | sed -r "s/<${xml_tag}>(.*?)</${xml_tag}>/\1/"
}


## Filesystem path testing

parent_dir_exists_0() {
    local dirent="$(string_rstrip "$1" '/')"
    local parent_dir="${dirent%/*}"
    [ -d "$parent_dir" ];
}
dirent_is_empty_0() {
    find 2>/dev/null -L "$1" -prune -empty | grep -q '.'
#    { [ -e "$1" ] && [ ! -s "$1" ]; };
}
dir_is_empty_0() {
    find 2>/dev/null -L "$1" -type d -prune -empty | grep -q '.'
#    { [ -d "$1" ] && [ ! -s "$1" ]; };
}
file_is_empty_0() {
#    find 2>/dev/null -L "$1" -type f -prune -empty | grep -q '.'
    { [ -f "$1" ] && [ ! -s "$1" ]; };
}
dirent_not_empty_0() {
    find 2>/dev/null -L "$1" -prune ! -empty | grep -q '.'
#    { [ -e "$1" ] && [ -s "$1" ]; };
}
dir_not_empty_0() {
    find 2>/dev/null -L "$1" -type d -prune ! -empty | grep -q '.'
#    { [ -d "$1" ] && [ -s "$1" ]; };
}
file_not_empty_0() {
#    find 2>/dev/null -L "$1" -type f -prune ! -empty | grep -q '.'
    { [ -f "$1" ] && [ -s "$1" ]; };
}

parent_dir_exists() {
    if parent_dir_exists_0 "$1"; then
        echo true
    else
        echo false
    fi
}
dirent_is_empty() {
    local dirent="$1"
    if [ ! -e "$dirent" ]; then
        echo_e "dirent_is_empty: file/directory does not exist: ${dirent}"
        echo false
        return 1
    elif dirent_is_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}
dir_is_empty() {
    local dirent="$1"
    if [ ! -d "$dirent" ]; then
        echo_e "dir_is_empty: invalid directory path: ${dirent}"
        echo false
        return 1
    elif dir_is_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}
file_is_empty() {
    local dirent="$1"
    if [ ! -f "$dirent" ]; then
        echo_e "file_is_empty: invalid file path: ${dirent}"
        echo false
        return 1
    elif file_is_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}
dirent_not_empty() {
    local dirent="$1"
    if [ ! -e "$dirent" ]; then
        echo_e "dirent_not_empty: file/directory does not exist: ${dirent}"
        echo false
        return 1
    elif dirent_not_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}
dir_not_empty() {
    local dirent="$1"
    if [ ! -d "$dirent" ]; then
        echo_e "dir_not_empty: invalid directory path: ${dirent}"
        echo false
        return 1
    elif dir_not_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}
file_not_empty() {
    local dirent="$1"
    if [ ! -f "$dirent" ]; then
        echo_e "file_not_empty: invalid file path: ${dirent}"
        echo false
        return 1
    elif file_not_empty_0 "$dirent"; then
        echo true
        return 0
    else
        echo false
        return 1
    fi
}


## Path representation

if readlink -f ~ 1>/dev/null 2>/dev/null; then
    READLINK_F_AVAILABLE=true
else
    READLINK_F_AVAILABLE=false
fi

fullpath_alias() {
    local path="$1"
    local dereference_symlinks="$2"
    if [ "$dereference_symlinks" = true ]; then
        fullpath_fn="pwd -P"
    else
        fullpath_fn="pwd"
    fi
    pushd . >/dev/null
    local path_prefix="$path"
    local path_suffix=''
    while true; do
        if [ -d "$path_prefix" ]; then
            break
        elif [ "$path_prefix" = '/' ] || [ "$path_prefix" = '.' ]; then
            break
        else
            if [ -z "$path_suffix" ]; then
                path_suffix=$(basename "$path_prefix")
            else
                path_suffix="$(basename "$path_prefix")/${path_suffix}"
            fi
            path_prefix=$(dirname "$path_prefix")
        fi
    done
    cd "$path_prefix" || { echo_e "Failed to access path: ${path_prefix}" ; return; }
    path_prefix=$(eval "$fullpath_fn")
    if [ -z "$path_suffix" ]; then
        echo "$path_prefix"
    elif [ "$path_prefix" = '/' ]; then
        echo "${path_prefix}${path_suffix}"
    else
        echo "${path_prefix}/${path_suffix}"
    fi
    popd >/dev/null
}

fullpath() {
    if (( $# != 1 )); then
        echo_e "fullpath: expected one path operand"
        return 1
    fi
    local path="$1"
    fullpath_alias "$path" false
}
abspath() {
    if (( $# != 1 )); then
        echo_e "abspath: expected one path operand"
        return 1
    fi
    local path="$1"
    local readlink_status=1
    if [ "$READLINK_F_AVAILABLE" = true ]; then
        readlink -f "$path"
        readlink_status=$?
    fi
    if (( readlink_status != 0 )); then
        fullpath_alias "$path" true
    fi
}

fullpath_e() {
    if (( $# != 1 )); then
        echo_e "fullpath_e: expected one path operand"
        return 1
    fi
    local path="$1"
    if [ ! -e "$path" ]; then
        echo_e "fullpath_e: path does not exist: ${path}"
        return 1
    fi
    fullpath "$path"
}
abspath_e() {
    if (( $# != 1 )); then
        echo_e "abspath_e: expected one path operand"
        return 1
    fi
    local path="$1"
    if [ ! -e "$path" ]; then
        echo_e "abspath_e: path does not exist: ${path}"
        return 1
    fi
    abspath "$path"
}

preserve_trailing_slash_alias() {
    if (( $# != 2 )); then
        echo_e "preserve_trailing_slash_alias: expected a path function name and one path operand"
        return 1
    fi
    local path_fn="$1"
    local path_in="$2"
    local path_out=$(eval "${path_fn} \"$path_in\"")
    if [ "$(string_endswith "$path_in" '/')" = true ]; then
        if [ "$(string_endswith "$path_out" '/')" = false ]; then
            path_out="${path_out}/"
        fi
    elif [ "$(string_endswith "$path_out" '/')" = true ]; then
        path_out=$(string_rstrip "$path_out" '/')
    fi
    echo "$path_out"
}

fullpath_preserve_trailing_slash() {
    if (( $# != 1 )); then
        echo_e "fullpath_preserve_trailing_slash: expected one path operand"
        return 1
    fi
    preserve_trailing_slash_alias 'fullpath' "$1"
}
abspath_preserve_trailing_slash() {
    if (( $# != 1 )); then
        echo_e "abspath_preserve_trailing_slash: expected one path operand"
        return 1
    fi
    abspath_trailing_slash_alias 'fullpath' "$1"
}

derefpath() {
    local deref_count="$1"; shift
    if [ "$(string_is_posint "$deref_count")" = false ]; then
        echo_e "derefpath: first argument must be nonzero deref count"
        return 1
    fi
    if (( $# != 1 )); then
        echo_e "derefpath: expected one path operand"
        return 1
    fi
    local path_temp=$(fullpath "$1")
    local path_link=''
    local path_suffix=''
    while (( deref_count > 0 )) && [ "$path_temp" != '/' ]; do
        path_link=$(readlink "$path_temp")
        if [ -n "$path_link" ]; then
            path_temp="$path_link"
            ((deref_count--))
        else
            path_suffix="$(basename "$path_temp")/${path_suffix}"
            path_temp=$(dirname "$path_temp")
        fi
    done
    echo "/$(string_strip "${path_temp}/${path_suffix}" '/')"
}

abspath_all() {
    process_items 'abspath' false true "$@"
}
fullpath_all() {
    process_items 'fullpath' false true "$@"
}
abspath_all_e() {
    process_items 'abspath_e' false true "$@"
}
fullpath_all_e() {
    process_items 'fullpath_e' false true "$@"
}
basename_all() {
    process_items 'basename' false true "$@"
}
dirname_all() {
    process_items 'dirname' false true "$@"
}

cut_slice_alias() {
    local func_name="$1"; shift
    local item_type="$1"; shift
    local delimiter="$1"; shift
    local reverse="$1"; shift
    local idx_a idx_b
    local idx_start idx_end

    if (( $# < 1 )); then
        echo_e "${func_name}: first one or two arguments must be nonzero indices from end, like '2-1' or '2 1', respectively"
        return 1
    fi

    if [[ $1 == *-* ]]; then
        idx_a=$(echo "$1" | cut -d'-' -f1)
        idx_b=$(echo "$1" | cut -d'-' -f2)
        shift
    elif (( $# >= 2 )); then
        idx_a="$1"; shift
        idx_b="$1"; shift
    fi

    if [ "$(string_is_posint "$idx_a")" = false ] || [ "$(string_is_posint "$idx_b")" = false ]; then
        echo_e "${func_name}: first one or two arguments must be nonzero indices from end, like '2-1' or '2 1'"
        return 1
    fi
    if ! [[ -p /dev/stdin ]] && (( $# == 0 )); then
        echo_e "${func_name}: expected one or more ${item_type} operands after index arguments, or piped in on separate lines"
        return 1
    fi

    if (( idx_a < idx_b )); then
        idx_start="$idx_a"
        idx_end="$idx_b"
    else
        idx_start="$idx_b"
        idx_end="$idx_a"
    fi

    cmd="cut -d'${delimiter}' -f${idx_start}-${idx_end}"

    if [ "$reverse" = true ]; then
        cmd="rev | ${cmd} | rev"
    fi

    process_items "$cmd" true false "$@"
}
pathfrombegin() {
    cut_slice_alias pathfrombegin 'path' '/' false "$@"
}
pathfromend() {
    cut_slice_alias pathfromend 'path' '/' true "$@"
}



##### From shell-utils/linux_bash/lib/bash_shell_func.sh #####


## Bash prompts

prompt_venv_prefix() { printf '%s' "$PS1" | grep -Eo '^[[:space:]]*\([^\(\)]*\)[[:space:]]+'; }

# no colors
#prompt_dname() { export PS1="$(prompt_venv_prefix)\W \$ "; }
#prompt_dfull() { export PS1="$(prompt_venv_prefix)\w \$ "; }
#prompt_short() { export PS1="$(prompt_venv_prefix)[\u@\h:\W]\$ "; }
#prompt_med()   { export PS1="$(prompt_venv_prefix)[\u@\h:\w]\$ "; }
#prompt_long()  { export PS1="$(prompt_venv_prefix)[\u@\H:\w]\$ "; }
#prompt_reset() { export PS1="[\u@\h:\w]\$ "; }

# colors
prompt_dname() { export PS1="$(prompt_venv_prefix)\[\033[01;34m\]\W\[\033[00m\] \$ "; }
prompt_dfull() { export PS1="$(prompt_venv_prefix)\[\033[01;34m\]\w\[\033[00m\] \$ "; }
prompt_short() { export PS1="$(prompt_venv_prefix)[\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]]\$ "; }
prompt_med()   { export PS1="$(prompt_venv_prefix)[\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]\$ "; }
prompt_long()  { export PS1="$(prompt_venv_prefix)[\[\033[01;32m\]\u@\H\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]\$ "; }
prompt_reset() { export PS1="[\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]]\$ "; }

ccmd() {
    read -r -e -p "$ " cmd
    history -s "$cmd"
    eval "$cmd"
}


## String manipulation

line2space() {
    local str result
    if [[ -p /dev/stdin ]]; then
        str=$(cat)
    else
        str="$1"
    fi
    result=$(string_strip "$str" | tr '\n' ' ')
    echo "$result"
}
space2line() { tr ' ' '\n'; }

line2csstring() {
    local result=$(xargs printf "'%s',")
    result=$(string_rstrip "$result" ',')
    echo "$result"
}

string_replace() { sed -r "s|${1}|${2}|g"; }
string_prepend() { sed -r "s|(.*)|${1}\1|"; }
string_append() { sed -r "s|(.*)|\1${1}|"; }


## Command-line argument manipulation

echoeval() {
    local echo_args
    if [[ -p /dev/stdin ]]; then
        IFS= read -r echo_args
    else
        echo_args="$*"
    fi
    eval "echo ${echo_args}"
}

tokentx() {
    local tx="$1"
    local token_arr=()
    local token_tx_arr=()
    local token_delim='\n'
    local token
    while IFS= read -r token; do
        token_arr+=( "$token" )
    done
    if (( ${#token_arr[@]} == 1 )); then
        token_delim=' '
        IFS="$token_delim" read -r -a token_arr <<< "${token_arr[0]}"
    fi
    local token_tx
    for token in "${token_arr[@]}"; do
        token_tx=${tx//'%'/${token}}
        token_tx_arr+=( "$token_tx" )
    done
    printf "%s${token_delim}" "${token_tx_arr[@]}"
}

layz() {
    local cmd_arr_in cmd_arr_out
    local arg_idx rep_idx
    local arg_out arg_rep
    local cmd_out debug arg_opt
    debug=false
    if [[ $1 == -* ]]; then
        arg_opt=$(echo "$1" | sed -r 's|\-+(.*)|\1|')
        if [ "$arg_opt" = 'db' ] || [ "$arg_opt" = 'debug' ] || [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
            debug=true
            shift
        fi
    fi
    cmd_arr_in=("$@")
    cmd_arr_out=()
    for arg_idx in "${!cmd_arr_in[@]}"; do
        arg_out="${cmd_arr_in[$arg_idx]}"
        for rep_idx in "${!cmd_arr_in[@]}"; do
            if (( rep_idx < arg_idx )); then
                arg_rep="${cmd_arr_out[$rep_idx]}"
            else
                arg_rep="${cmd_arr_in[$rep_idx]}"
            fi
            arg_out=$(echo "$arg_out" | sed -r "s|%${rep_idx}([^0-9]\|$)|${arg_rep}\1|g")
        done
        cmd_arr_out+=( "$arg_out" )
    done
    cmd_out="${cmd_arr_out[*]}"
    if [ "$debug" = true ]; then
        echo "$cmd_out"
    else
        $cmd_out
    fi
}


## File operations

link_or_copy() {
    if ! ln -f "$@"; then
        cp "$@"
    fi
}

absymlink_defunct() {
    local arg_arr arg
    arg_arr=()
    while (( "$#" )); do
        arg="$1"
        if ! [[ $arg == -* ]]; then
            arg=$(readlink -f "$arg")
        fi
        arg_arr+=( "$arg" )
        shift
    done
    ln -s "${arg_arr[@]}"
}

mv_and_absymlink() {
    local src_arr=()
    local dst=''
    local mv_args_arr=()
    local dst_dir_exists
    local dryrun=false
    if (( $# == 2 )); then
        src_arr+=( "$1" )
        dst="$2"
        if [ -d "$dst" ]; then
            dst_dir_exists=true
        else
            dst_dir_exists=false
        fi
    else
        dst_dir_exists=true
        local arg arg_opt
        while (( $# )); do
            arg="$1"
            if [ "$(string_startswith "$arg" '-')" = true ]; then
                arg_opt=$(string_lstrip "$arg" '-')
                if [ "$(itemOneOf "$arg_opt" 'dr' 'dryrun' 'db' 'debug')" = true ]; then
                    dryrun=true
                    shift; continue
                elif [ "$arg" == '-t' ]; then
                    dst="$2"; shift
                else
                    mv_args_arr+=( "$arg" )
                fi
            elif (( $# == 1 )) && [ -z "$dst" ]; then
                dst="$arg"
            else
                src_arr+=( "$arg" )
            fi
            shift
        done
    fi
    local mv_opt_args="${mv_args_arr[*]+${mv_args_arr[*]}}"
    local dryrun_arg
    if [ "$dryrun" = true ]; then
        dryrun_arg='-dryrun'
    else
        dryrun_arg=''
    fi
    local src dst_path
    for src in "${src_arr[@]}"; do
        mv_cmd="mv ${mv_opt_args} \"${src}\" \"${dst}\""
        if [ "$dryrun" = true ]; then
            echo "$mv_cmd"
        else
            eval "$mv_cmd"
        fi
        if [ "$dst_dir_exists" = false ]; then
            dst_path="$dst"
        else
            dst_path="${dst%/}/$(basename "$src")"
        fi
        absymlink ${dryrun_arg} "$dst_path" "${src%/}"
    done
}

touch_all() {
    echo "Will recursively search through argument directories and touch all files within"
    if (( $# == 0 )); then
        echo "Usage: touch_all path1 path2 ... pathN"
        return
    fi
    while (( $# > 0 )); do
        echo "Touching files in: ${1}"
        find "$1" -type f -exec touch {} \;
        shift
    done
    echo "Done!"
}


## Read inputs

get_csv_cols() {
    :
}

SHELL_UTILS_READ_CSV_IP=false
read_csv() {
    local get_fields="$1"
    local csv_delim=','
    if (( $# >= 2 )); then
        csv_delim="$2"
    fi

    local read_status IFS
    local csv_line csv_line_arr
    csv_line=''

    if [ "$SHELL_UTILS_READ_CSV_IP" = false ]; then
        SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR=()
        SHELL_UTILS_READ_CSV_GET_FIELDS_IDX_ARR=()
        local header_line get_fields_arr header_fields_arr
        IFS= read -r header_line
        read_status=$?
        if (( read_status != 0 )); then return "$read_status"; fi
        IFS="$csv_delim" read -ra get_fields_arr <<< "$get_fields"
        IFS="$csv_delim" read -ra header_fields_arr <<< "$header_line"
        local get_field_idx field_name field_idx
        local get_field_in_header=false
        local first_missing_get_field=''
        for get_field_idx in "${!get_fields_arr[@]}"; do
            field_name="${get_fields_arr[${get_field_idx}]}"
            eval "unset ${field_name}"
            field_idx=$(indexOf "$field_name" "${header_fields_arr[@]}")
            if (( field_idx == -1 )) && [ -z "$first_missing_get_field" ]; then
                first_missing_get_field="$field_name"
            fi
            if (( field_idx == -1 )) && [ "$get_field_in_header" = false ]; then
                field_idx="$get_field_idx"
            elif (( field_idx == -1 )) || [ -n "$first_missing_get_field" ]; then
                echo "ERROR: Cannot find field name '${first_missing_get_field}' in CSV header" >&2
                unset SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR
                unset SHELL_UTILS_READ_CSV_GET_FIELDS_IDX_ARR
                return 1
            else
                get_field_in_header=true
            fi
            SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR+=( "$field_name" )
            SHELL_UTILS_READ_CSV_GET_FIELDS_IDX_ARR+=( "$field_idx" )
        done
        if [ -n "$first_missing_get_field" ]; then
            # No 'get fields' match strings in first row of CSV,
            # so assume the CSV has no header and match order of
            # 'get fields' to the order of CSV columns.
            csv_line="$header_line"
            csv_line_arr=("${header_fields_arr[@]}")
        fi
        SHELL_UTILS_READ_CSV_IP=true
    fi

    if [ -z "$csv_line" ]; then
        IFS= read -r csv_line
        read_status=$?
        if (( read_status != 0 )); then
            if [ -n "$csv_line" ]; then
                # This is likely the case where we're reading
                # the last line of input and it doesn't have
                # a trailing newline so 'read' has a nonzero
                # exit status. We still want to parse this line.
                read_status=0
            else
                SHELL_UTILS_READ_CSV_IP=false
                unset SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR
                unset SHELL_UTILS_READ_CSV_GET_FIELDS_IDX_ARR
                local field_name
                for field_name in "${SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR[@]}"; do
                    eval "unset ${field_name}"
                done
                return "$read_status"
            fi
        fi
        IFS="$csv_delim" read -ra csv_line_arr <<< "$csv_line"
    fi

    local i field_name field_idx field_val
    for i in "${!SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR[@]}"; do
        field_name="${SHELL_UTILS_READ_CSV_GET_FIELDS_NAME_ARR[$i]}"
        field_idx="${SHELL_UTILS_READ_CSV_GET_FIELDS_IDX_ARR[$i]}"
        field_val="${csv_line_arr[$field_idx]}"
        eval "${field_name}=\"${field_val}\""
    done

    return "$read_status"
}


## Distill information

du_k() { du --block-size=1K "$@" | awk '{print $1}'; }
du_m() { du --block-size=1M "$@" | awk '{print $1}'; }
du_g() { du --block-size=1G "$@" | awk '{print $1}'; }
du_t() { du --block-size=1T "$@" | awk '{print $1}'; }

wc_nlines() {
    process_items 'wc -l' false true "$@" | awk '{print $1}'
}

count_by_date() {
    grep -Eo '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+' | awk '{date_count_dict[$0]++} END {for (date in date_count_dict) printf "%s : %5s\n", date, date_count_dict[date]}' | sort
}
count_by_month() {
    grep -Eo '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+' | awk '{date_count_dict[$1]++} END {for (date in date_count_dict) printf "%s : %5s\n", date, date_count_dict[date]}' | sort
}
count_by_date_with_ex() {
    grep -Eo '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+.*$' | awk '{date=sprintf("%s %2s", $1, $2); date_count_dict[date]++; date_ex_dict[date]=$0} END {for (date in date_count_dict) printf "%s : %5s : %s\n", date, date_count_dict[date], date_ex_dict[date]}' | sort
}
count_by_month_with_ex() {
    grep -Eo '(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+[0-9]+.*$' | awk '{date=$1; date_count_dict[date]++; date_ex_dict[date]=$0} END {for (date in date_count_dict) printf "%s : %5s : %s\n", date, date_count_dict[date], date_ex_dict[date]}' | sort
}

sum_col() {
    local col_num=1
    local col_delim=' '
    if (( $# >= 1 )); then
        col_num="$1"
    fi
    if (( $# >= 2 )); then
        col_delim="$2"
    fi
    awk -F"$col_delim" "{print \$${col_num}}" | paste -s -d"+" | bc
}

get_stats() {
    # Adapted from https://stackoverflow.com/a/9790056/8896374
    local perl_cmd
    perl_cmd=''\
'use List::Util qw(max min sum);'\
'@num_list=(); while(<>){ $sqsum+=$_*$_; push(@num_list,$_); };'\
'$nitems=@num_list;'\
'if ($nitems == 0) { $sum=0; $min=0; $max=0; $med=0; $avg=0; $std=0; } else {'\
'$sum=sum(@num_list); $avg=$sum/$nitems; $max=max(@num_list)+0; $min=min(@num_list)+0;'\
'$std=sqrt($sqsum/$nitems-($sum/$nitems)*($sum/$nitems));'\
'$mid=int $nitems/2; @srtd=sort @num_list; if($nitems%2){ $med=$srtd[$mid]+0; }else{ $med=($srtd[$mid-1]+$srtd[$mid])/2; }; };'\
'print "cnt: ${nitems}\nsum: ${sum}\nmin: ${min}\nmax: ${max}\nmed: ${med}\navg: ${avg}\nstd: ${std}\n";'\
'if ($nitems == 0) { exit(1); } else { exit(0); };'
    perl -e "$perl_cmd"
}


# Find operations

#alias findl='find -mindepth 1 -maxdepth 1'
#alias findls='find -mindepth 1 -maxdepth 1 -ls | sed -r "s|^[0-9]+\s+[0-9]+\s+||"'
#alias findlsh='find -mindepth 1 -maxdepth 1 -type f -exec ls -lh {} \; | sed -r "s|^[0-9]+\s+[0-9]+\s+||"'
find_alias() {
    local find_func_name="$1"; shift

    local opt_args_1 path_args opt_args_2 debug depth_arg_provided stock_depth_args find_cmd_suffix
    opt_args_1=()
    path_args=()
    opt_args_2=()
    debug=false
    depth_arg_provided=false
    stock_depth_args=''
    find_cmd_suffix=''

    local findup_direct=false
    local findup_minheight=''
    local findup_maxheight=''

    local parsing_opt_args arg arg_opt argval
    parsing_opt_args=false
    while (( "$#" )); do
        arg="$1"
        if [[ $arg == -* ]] || [ "$arg" == '!' ]; then
            parsing_opt_args=true
            arg_opt=$(echo "$arg" | sed -r 's|\-+(.*)|\1|')
            if [ "$arg_opt" = 'db' ] || [ "$arg_opt" = 'debug' ] || [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
                debug=true
                shift; continue
            elif [ "$find_func_name" = 'findup' ] && [ "$arg_opt" = 'direct' ]; then
                findup_direct=true
                shift; continue
            elif [ "$find_func_name" = 'findup' ] && [ "$arg_opt" = 'minheight' ]; then
                findup_minheight="$2"
                shift; shift; continue
            elif [ "$find_func_name" = 'findup' ] && [ "$arg_opt" = 'maxheight' ]; then
                findup_maxheight="$2"
                shift; shift; continue
            elif [ "$arg_opt" = 'mindepth' ] || [ "$arg_opt" = 'maxdepth' ]; then
                depth_arg_provided=true
                if [ "$find_func_name" = 'findup' ]; then
                    echo_e "findup: mindepth/maxdepth options are not supported, use minheight/maxheight instead"
                    return
                fi
            elif [ "$arg_opt" = 'H' ] || [ "$arg_opt" = 'L' ] || [ "$arg_opt" = 'P' ]; then
                opt_args_1+=( "$arg" )
                shift; parsing_opt_args=false; continue
            elif [ "$arg_opt" = 'D' ] || [ "$arg_opt" = 'Olevel' ]; then
                shift; argval="$1"
                opt_args_1+=( "$arg" "$argval" )
                shift; parsing_opt_args=false; continue
            fi
        elif [[ $arg == [\(\)\;] ]]; then
            parsing_opt_args=true
            arg="\\${arg}"
        fi
        if [ "$parsing_opt_args" = true ]; then
            if [[ $arg == *"*"* ]] || [[ $arg == *" "* ]]; then
                arg="'${arg}'"
            fi
            opt_args_2+=( "$arg" )
        else
            path_args+=( "$arg" )
        fi
        shift
    done

    if [ "$find_func_name" = 'findup' ]; then
        local path_src path_tmp depth_args
        if (( ${#path_args[@]} == 0 )); then
            path_args+=( '.' )
        fi
        for path_src in "${path_args[@]}"; do
            path_tmp=$(fullpath "$path_src")
            depth=0
            while true; do
                if [ -n "$findup_maxheight" ] && (( depth > findup_maxheight )); then
                    break
                fi
                if [ "$findup_direct" = true ] || (( depth == 0 )) || [ "$path_tmp" = '/' ]; then
                    depth_args="-mindepth 0 -maxdepth 0"
                else
                    depth_args="-mindepth 1 -maxdepth 1"
                fi
                if [ -z "$findup_minheight" ] || (( depth >= findup_minheight )); then
                    cmd="find ${opt_args_1[*]} \"${path_tmp}\" ${depth_args} ${opt_args_2[*]} ${find_cmd_suffix}"
                    if [ "$debug" = true ]; then
                        echo "$cmd"
                    else
                        eval "$cmd"
                    fi
                fi
                if [ "$path_tmp" = '/' ]; then
                    break
                fi
                path_tmp=$(dirname "$path_tmp")
                if [ "$findup_direct" = false ] && (( depth == 0 )); then
                    path_tmp=$(dirname "$path_tmp")
                fi
                ((depth++))
            done
        done

    else
        local stock_depth_funcs=( 'findl' 'findls' 'findlsh' )
        if [ "$(itemOneOf "$find_func_name" "${stock_depth_funcs[@]}")" = true ] && [ "$depth_arg_provided" = false ]; then
            stock_depth_args="-mindepth 1 -maxdepth 1"
        fi

        if [ "$find_func_name" = 'findl' ]; then
            find_cmd_suffix=''
        elif [ "$find_func_name" = 'findls' ]; then
            find_cmd_suffix="-ls | sed -r 's|^[0-9]+\s+[0-9]+\s+||'"
        elif [ "$find_func_name" = 'findlsh' ]; then
            find_cmd_suffix=" -type f -exec ls -lh {} \; | sed -r 's|^[0-9]+\s+[0-9]+\s+||'"
        fi

        cmd="find ${opt_args_1[*]} ${path_args[*]} ${stock_depth_args} ${opt_args_2[*]} ${find_cmd_suffix}"
        if [ "$debug" = true ]; then
            echo "$cmd"
        else
            eval "$cmd"
        fi
    fi
}
findup() {
    find_alias findup "$@"
}
findl() {
    find_alias findl "$@"
}
findls() {
    find_alias findls "$@"
}
findlsh() {
    find_alias findlsh "$@"
}
findst() {
    find_alias findls "$@" -mindepth 0 -maxdepth 0
}
find_missing_suffix() {
    local search_dir base_suffix check_suffix_arr suffix_exist_cond debug
    search_dir="$1"; shift
    base_suffix="$1"; shift
    check_suffix_arr=()
    suffix_exist_cond='all'
    debug=false

    local arg
    while (( "$#" )); do
        arg="$1"
        if ! [[ $arg == -* ]]; then
            check_suffix_arr+=( "$arg" )
        else
            arg_opt=$(echo "$arg" | sed -r 's|\-+(.*)|\1|')
            if [ "$arg_opt" = 'db' ] || [ "$arg_opt" = 'debug' ] || [ "$arg_opt" = 'dr' ] || [ "$arg_opt" = 'dryrun' ]; then
                debug=true
            elif [ "$arg_opt" = 'any' ]; then
                suffix_exist_cond='any'
            elif [ "$arg_opt" = 'all' ]; then
                suffix_exist_cond='all'
            else
                break
            fi
        fi
        shift
    done

    if [ "$suffix_exist_cond" = 'all' ]; then
        require_all_suffix_exist=true
    elif [ "$suffix_exist_cond" = 'any' ]; then
        require_all_suffix_exist=false
    fi

    if [ "$debug" = true ]; then
        find_alias find_missing_suffix "$search_dir" "$@" -name "*${base_suffix}" -print0 -debug

    elif [ "$require_all_suffix_exist" = true ]; then
        while IFS= read -r -d '' base_dirent; do
            base_dirent_nosuff="${base_dirent%"${base_suffix}"}"
            all_exist=true
            for suffix in "${check_suffix_arr[@]}"; do
                check_dirent="${base_dirent_nosuff}${suffix}"
                if [ ! -e "$check_dirent" ]; then
                    all_exist=false
                    break
                fi
            done
            if [ "$all_exist" = false ]; then
                echo "$base_dirent"
            fi
        done < <(find_alias find_missing_suffix "$search_dir" "$@" -name "*${base_suffix}" -print0)

    elif [ "$require_all_suffix_exist" = false ]; then
        while IFS= read -r -d '' base_dirent; do
            base_dirent_nosuff="${base_dirent%"${base_suffix}"}"
            some_exist=false
            for suffix in "${check_suffix_arr[@]}"; do
                check_dirent="${base_dirent_nosuff}${suffix}"
                if [ -e "$check_dirent" ]; then
                    some_exist=true
                    break
                fi
            done
            if [ "$some_exist" = false ]; then
                echo "$base_dirent"
            fi
        done < <(find_alias find_missing_suffix "$search_dir" "$@" -name "*${base_suffix}" -print0)
    fi
}


## Git

git_remote() {
    git config --get remote.origin.url
}

git_webpage() {
    local get_url_cmd="git config --get remote.origin.url"
    local url=$(eval "$get_url_cmd")
    if [ -z "$url" ]; then
        echo "Repo lookup command returned nothing: '${get_url_cmd}'"
        return
    fi
    url="${url##*@}"
    url="${url//://}"
    if ! echo "$url" | grep -q '^http'; then
        url="https://${url}"
    fi
    open -a "Google Chrome" "$url"
}

git_drop_all_changes() {
    git checkout -- .
}

git_reset_keep_changes() {
    git reset HEAD^
}

git_reset_drop_changes() {
    git reset --hard HEAD
}

git_stash_apply_no_merge() {
    git read-tree stash^{tree}
    git checkout-index -af
}

git_apply_force() {
    git apply --reject --whitespace=fix "$@"
}

git_remove_local_branches() {
  git branch | grep -v '\*' | xargs git branch -D
}

git_make_exec() {
    chmod -x "$@"
    git -c core.fileMode=false update-index --chmod=+x "$@"
    chmod +x "$@"
}

git_cmd_in() {

    ## Arguments
    local start_dir; start_dir="$(pwd)"
    local git_cmd_name='cmd'
    local git_cmd_arr=()
    local repo_dir_arr=()
    local ssh_passphrase=''

    ## Custom globals
    local git_cmd_choices=( 'clone' 'branch' 'status' 'stash' 'apply' 'stash apply' 'pull' 'push' )
    local git_cmd_need_ssh_arr=( 'clone' 'pull' 'push' )
    local start_dir repo_dir_arr repo_dir repo_name

    if [ -n "$1" ]; then
        git_cmd_name="$1"; shift
    fi
    ## Usage
    read -r -d '' script_usage << EOM
Usage: git_${git_cmd_name}_in [-p ssh_passphrase] REPO_DIR...
EOM
    if (( $# == 0 )); then
        echo_e "$script_usage"
        return
    fi

    ## Parse arguments
    local arg arg_opt arg_opt_nargs arg_val_can_start_with_dash
    while (( "$#" )); do
        arg="$1"

        if [ "$(string_startswith "$arg" '-')" = false ]; then
            if [ "$(itemOneOf "$arg" "${git_cmd_choices[@]}")" = true ]; then
                git_cmd_arr+=( "$arg" )
            else
                repo_dir_arr+=( "$(fullpath "$arg")" )
            fi

        else
            arg_opt="$(string_lstrip "$arg" '-')"
            arg_opt_nargs=''
            if [ "$(string_contains "$arg_opt" '=')" = true ]; then
                arg_val=$(printf '%s' "${arg_opt#*=}" | sed -r -e "s|^['\"]+||" -e "s|['\"]+$||")
                arg_opt="${arg_opt%%=*}"
                arg_opt_nargs_do_shift=false
            else
                arg_val="$2"
                arg_opt_nargs_do_shift=true
            fi
            arg_val_can_start_with_dash=false

            if [ "$arg_opt" = 'p' ] || [ "$arg_opt" = 'pw' ]; then
                arg_opt_nargs=1
                ssh_passphrase="$2"

            elif [ "$arg_opt" = 'h' ] || [ "$arg_opt" = 'help' ]; then
                arg_opt_nargs=0
                echo "$script_usage"
                return

            else
                echo_e "Unexpected argument: ${arg}"
                return
            fi

            if [ -z "$arg_opt_nargs" ]; then
                echo_e "Developer error! "'$arg_opt_nargs'" was not set for argument: ${arg}"
                return
            fi

            local i
            if [ "$arg_opt_nargs_do_shift" = true ] && (( arg_opt_nargs >= 1 )); then
                for arg_num in $(seq 1 $arg_opt_nargs); do
                    shift
                    arg_val="$1"
                    if [ -z "$arg_val" ]; then
                        echo_e "Missing expected value (#${arg_num}) for argument: ${arg}"
                        exit_script_with_status 1
                    elif [ "$arg_val_can_start_with_dash" = false ] && [ "$(string_startswith "$arg_val" '-')" = true ]; then
                        echo_e "Unexpected argument value: ${arg} ${arg_val}"
                        exit_script_with_status 1
                    fi
                done
            fi
        fi

        shift
    done

    for repo_dir in "${repo_dir_arr[@]}"; do
        echo -e "\nChanging to repo dir: ${repo_dir}"
        cd "$repo_dir" || return
        repo_name=$(basename "$repo_dir")

        for git_cmd in "${git_cmd_arr[@]}"; do
            echo "'${repo_name}' results of 'git ${git_cmd}' command:"
            if [ -n "$ssh_passphrase" ] && [ "$(itemOneOf "$git_cmd" "${git_cmd_need_ssh_arr[@]}")" = true ]; then
                expect -c "spawn git ${git_cmd}; expect \"passphrase\"; send \"${ssh_passphrase}\r\"; interact"
            else
                git -c pager.branch=false ${git_cmd}
            fi
        done
    done

    echo -e "\nChanging back to starting dir: ${start_dir}"
    cd "$start_dir" || return
    echo "Done!"
}

git_branch_in() {
    git_cmd_in branch branch "$@"
}
git_status_in() {
    git_cmd_in status status "$@"
}
git_pull_in() {
    local func_args_in=("$@")
    local func_args_out=()

    local do_stashing=false

    local arg arg_opt
    for arg in "${func_args_in[@]}"; do
        if [ "$(string_startswith "$arg" '-')" = true ]; then
            arg_opt="$(string_lstrip "$arg" '-')"

            if [ "$arg_opt" = 'stash' ]; then
                do_stashing=true
                arg=''
            fi
        fi

        if [ -n "$arg" ]; then
            func_args_out+=( "$arg" )
        fi
    done

    if [ "$do_stashing" = true ]; then
        git_cmd_arr=( 'stash' 'pull' "'stash apply'" )
    else
        git_cmd_arr=( 'pull' )
    fi

    eval git_cmd_in pull ${git_cmd_arr[*]} ${func_args_out[*]}
}

git_clone_replace() {
    local repo_url repo_url_bname repo_name
    local cmd status

    if (( $# == 0 )); then
        echo "Usage: git_clone_replace <github-repo-url>"
        return
    fi

    repo_url="$1"
    repo_url_bname=$(basename "$repo_url")
    repo_name="${repo_url_bname/.git/}"
    if [ ! -e "${repo_name}" ]; then
        echo "ERROR: Current repo folder does not exist: ${repo_name}"
        return
    fi
    if [ -e "${repo_name}_old" ]; then
        echo "ERROR: Old repo folder still exists: ${repo_name}_old"
        return
    fi
    if [ -e "${repo_name}_new" ]; then
        echo "ERROR: New repo folder already exists: ${repo_name}_new"
        return
    fi

    cmd="git clone ${repo_url} ${repo_name}_new"
    echo -e "\nCOMMAND: ${cmd}"; eval "$cmd"

    cmd="mv ${repo_name} ${repo_name}_old; mv ${repo_name}_new ${repo_name};"
    echo -e "\nCOMMAND: ${cmd}\n(sleeping 3 seconds...)"; sleep 5s; eval "$cmd"
    status=$?
    if (( status == 0 )); then
        cmd="rm -rf ${repo_name}_old"
        echo -e "\nCOMMAND: ${cmd}\n(sleeping 5 seconds...)"; sleep 5s; eval "$cmd"
    fi

    echo -e "\nDone!"
}


## Other

ssh_alias() {
    set -x; ssh "$@" -t "bash --rcfile ~/.bashrc_from_ssh"; set +x
}

#alias rsync_example='rsync_alias auto user@hostname -rtLPv'
rsync_alias() {
    local direction_choices=( 'to-host' 'from-host' 'auto' )
    local direction="$1"; shift
    local remote_host="$1"; shift
    local opt_arg_arr=()
    local dryrun=false

    local arg arg_opt
    while (( $# > 2 )); do
        arg="$1"; shift
        if [[ $arg == -* ]]; then
            arg_opt=$(echo "$arg" | sed -r 's|\-+(.*)|\1|')
            if [ "$arg_opt" == 'dr' ] || [ "$arg_opt" == 'dryrun' ]; then
                dryrun=true
                continue
            elif [ "$arg_opt" == 'db' ] || [ "$arg_opt" == 'debug' ]; then
                dryrun=true
                continue
            elif [ "$arg_opt" == 'to-host' ] || [ "$arg_opt" == 'from-host' ]; then
                direction="$arg_opt"
                continue
            fi
        fi
        if [[ $arg == *"*"* ]] || [[ $arg == *" "* ]]; then
            arg="'${arg}'"
        fi
        opt_arg_arr+=( "$arg" )
    done
    local src_path="$1"
    local dst_path="$2"

    if [ "$(itemOneOf "$direction" "${direction_choices[@]}")" = false ]; then
        echo_e "ERROR: rsync_alias DIRECTION must be one of the following: ${direction_choices[*]}"
        return 1
    elif [ -z "$remote_host" ] || [ -z "$src_path" ] || [ -z "$dst_path" ] || [[ $src_path == -* ]] || [[ $dst_path == -* ]]; then
        echo_e "ERROR: rsync_alias required postional arguments: DIRECTION HOST SRC DEST"
        return 1
    fi

    if [ "$direction" = 'to-host' ]; then
        dst_path="${remote_host}:${dst_path}"
    elif [ "$direction" = 'from-host' ]; then
        src_path="${remote_host}:${src_path}"
    elif [ "$direction" = 'auto' ]; then
        if [ -e "$src_path" ] && [ -e "$dst_path" ]; then
            echo_e "ERROR: rsync_alias cannot automatically determine DIRECTION when both SRC and DEST paths exist locally"
            return 1
        elif [ -e "$src_path" ]; then
            dst_path="${remote_host}:${dst_path}"
        elif [ -e "$dst_path" ]; then
            src_path="${remote_host}:${src_path}"
        else
            echo_e "ERROR: rsync_alias neither SRC nor DEST paths exist locally (DIRECTION='auto')"
            return 1
        fi
    fi

    cmd="rsync ${opt_arg_arr[*]} \"${src_path}\" \"${dst_path}\""
    echo "$cmd"
    if [ "$dryrun" = false ]; then
        eval "$cmd"
    fi
}

rsync_alias_defopt() {
    local remote_host="$1"; shift
    rsync_alias auto "$remote_host" -rtlv --partial-dir='.rsync-partial' --progress --exclude '.DS_Store' "$@"
}
